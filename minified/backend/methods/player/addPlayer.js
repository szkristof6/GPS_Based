const playersSchema=require("../../schemas/players"),players=require("../../db/players"),locations=require("../../db/locations"),games=require("../../db/games");async function getPlayers(e,a){try{await playersSchema.validate(e.body);const i=await players.findOne({game_id:e.body.game_id,user_id:e.user.user_id});if(i){const e=await players.count({game_id:i.game_id}),d=await games.findOne({_id:i.game_id});return void a.send({status:"inplay",player_id:i._id,count:e,time:d.date})}const d=await players.insert({user_id:e.user.user_id,game_id:e.body.game_id,location_id:null,team_id:e.body.team_id,point:0}),s=await locations.insert({location:e.body.location,date:new Date,player_id:d._id,game_id:d.game_id}),t=await players.findOneAndUpdate({_id:d._id},{$set:{location_id:s._id}}),r=await players.count({game_id:d.game_id}),n=await games.findOne({_id:i.game_id});return void a.send({status:"success",player_id:t._id,count:r,time:n.date})}catch(e){return e.message.startsWith("E11000")&&(e.message="This username is already playing!"),void a.send(e)}}module.exports=getPlayers;